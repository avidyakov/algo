"""ID посылки: 58711419

-- ПРИНЦИП РАБОТЫ --
Система для поиска релевантных документов по запросу. На вход подаются документы. Затем по ним строится поисковой
индекс в функции get_index. Потом на вход подаются запросы, для которых нужно найти релевантные документы.
И наконец ищутся самые релевантные документы по индексу в функции search.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
1. Построение поискового индекса
Чтобы построить поисковой индекс, нам нужно пройтись по всем словам в документах и записать, в каком документе они
встречались. Сложность равна O(n), где n - это количество всех слов во всех документах.

2. Поиск релевантных документов по запросу
Поиск релевантных документов работает за O(n * (1 + log(n))), где n - количество уникальных слов в запросе. Сначала мы
проходимся по всем уникальным словам и записываем частоты документов, в которых встречались слова, а это равно O(n).
Затем нам необходимо отсортировать эти документы, а это равно O(n * log(n)). O(n) + O(n * log(n)) = O(n * (1 + log(n))).

-- ПРОСТРАНСТВЕННАЯ СОЛЖНОСТЬ --
1. Построение поискового индекса
Для хранения индекса мы используем словарь, ключи которого это уникальные слова в документах, а значения это частота
слов в документах. Сложность = O(n + k), где n = количество уникальных слов в документах и k = количество всех
слов в документах.

2. Поиск релевантных документов по запросу
Для поиска документов по запросы мы используем дополнительный словарь O(n + k), где n = количество уникальных слов
в запросе и k = сумма частот всех уникальных слов. Еще мы используем неизменяемое множество
для хранения слов запрос = O(n), где n = количество уникальных слов в запросе.

Остальная часть скрипта использует константное пространство для сбора документов в функции main.

"""


def get_index(documents):
    doc_indexes = {}
    for idx, doc in enumerate(documents, 1):
        for word in doc.split():
            if word not in doc_indexes:
                doc_indexes[word] = {}

            doc_indexes[word][idx] = doc_indexes[word].get(idx, 0) + 1

    return doc_indexes


def search(search_index, queries, limit=5):
    for query in queries:
        acc = {}
        for word in query:
            for doc, count in search_index.get(word, {}).items():
                acc[doc] = acc.get(doc, 0) + count

        yield sorted(acc.items(), key=lambda i: (-i[1], i[0]))[:limit]


def main():
    number_of_documents = int(input())
    documents = (input() for _ in range(number_of_documents))
    search_index = get_index(documents)

    number_of_queries = int(input())
    queries = (frozenset(input().split()) for _ in range(number_of_queries))

    for docs in search(search_index, queries):
        print(*(i[0] for i in docs))


if __name__ == '__main__':
    main()
